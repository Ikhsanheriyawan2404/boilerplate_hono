name: CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    # services:
    #   db:
    #     image: postgres:latest
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: admin
    #       POSTGRES_DB: testdb
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # - name: Set up Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '14'

    # - name: Install dependencies
    #   run: npm install

    # - name: Run tests
    #   env:
    #     DATABASE_URL: postgresql://postgres:admin@localhost:5432/testdb?schema=public
    #   run: npm test

  deploy_main:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Production
      env:
        HOST: ${{ secrets.HOST }}
        USER: ${{ secrets.USER }}
      run: |
        ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          cd /var/www/html/hono
          docker compose -f compose.prod.yml pull
          docker compose -f compose.prod.yml up -d
        EOF

  deploy_dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Development
      env:
        HOST: ${{ secrets.HOST }}
        USER: ${{ secrets.USER }}
      run: |
        ssh -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          cd /var/www/html/hono
          docker compose -f compose.prod.yml pull
          docker compose -f compose.prod.yml up -d
        EOF
